// 全站通用的变量和样式

// 颜色
:root {
  --colorNeural1: #ffffff;
  --colorNeural2: #f5f5f5;
  --colorNeural3: #e3e3e3;
  --colorNeural4: #cdcdcd;
  --colorNeural5: #afafaf;
  --colorNeural6: #8d8d8d;
  --colorNeural7: #6b6b6b;
  --colorNeural8: #4f4f4f;
  --colorNeural9: #242424;
  --colorNeural0: #141414;

  --colorBgBlur: rgba(245,245,245, .88);
}

@media (prefers-color-scheme: dark) {
  :root {
    --colorNeural1: #141414;
    --colorNeural2: #242424;
    --colorNeural3: #4f4f4f;
    --colorNeural4: #6b6b6b;
    --colorNeural5: #8d8d8d;
    --colorNeural6: #afafaf;
    --colorNeural7: #cdcdcd;
    --colorNeural8: #e3e3e3;
    --colorNeural9: #f5f5f5;
    --colorNeural0: #ffffff;

    --colorBgBlur: rgba(36, 36, 36, .88);
  }
}

$colorNeural1: var(--colorNeural1);
$colorNeural2: var(--colorNeural2);
$colorNeural3: var(--colorNeural3);
$colorNeural4: var(--colorNeural4);
$colorNeural5: var(--colorNeural5);
$colorNeural6: var(--colorNeural6);
$colorNeural7: var(--colorNeural7);
$colorNeural8: var(--colorNeural8);
$colorNeural9: var(--colorNeural9);
$colorNeural0: var(--colorNeural0);

$colorBgBlur: var(--colorBgBlur);

$colorOrange: #FFA14A;
$colorBlue: #5361E2;

// 响应式断点
@mixin deviceMobile {
  @media (min-width: 600px) {
    @content;
  }
}

@mixin deviceTablet {
  @media (min-width: 1024px) {
    @content;
  }
}

@mixin devicePC {
  @media (min-width: 1440px) {
    @content;
  }
}

// 字体
@font-face {
  font-family: CN;
  src: url('/public/fonts/NotoSansSC-VariableFont.ttf'), local('PingFang SC'), local('Microsoft YaHei');
}

@font-face {
  font-family: EN;
  src: url('/public/fonts/Lexend-VariableFont.ttf');
}

// 动效曲线
$curveStand: cubic-bezier(0.4, 0.0, 0.2, 1);
$curveDecel: cubic-bezier(0.0, 0.0, 0.2, 1);
$curveAccel: cubic-bezier(0.4, 0.0, 1.0, 1);
$curveSharp: cubic-bezier(0.4, 0.0, 0.6, 1);
$curveEase: cubic-bezier(0.25, 0.1, 0.25, 1);
$curveEaseIn: cubic-bezier(0.42, 0, 1, 1);
$curveEaseOut: cubic-bezier(0, 0, 0.58, 1);
$curveEaseInOut: cubic-bezier(0.42, 0, 0.58, 1);

@function fnSpringWobbly($t) {
  $E: math.$e;
  @return -0.5 * math.pow($E, (-6 * $t)) * (-2 * math.pow($E, (6 * $t)) + math.sin(12 * $t) + 2 * math.cos(12 * $t));
}

@function fnLerp($a, $b, $p) {
  @return $a+$p * ($b - $a);
}